version: '3.8'

services:
  # MySQL Database с проверкой здоровья
  mysql:
    image: mysql:8.0
    container_name: adminpanel_mysql_dev
    platform: linux/arm64
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: adminpanel
      MYSQL_USER: adminpanel
      MYSQL_PASSWORD: password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data_dev:/var/lib/mysql
    networks:
      - adminpanel_network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-ppassword"]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 30s

  # Сервис для выполнения миграций (временно отключен)
  # migration-runner:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile.migrations
  #   container_name: adminpanel_migrations
  #   environment:
  #     NODE_ENV: development
  #     DB_HOST: mysql
  #     DB_PORT: 3306
  #     DB_NAME: adminpanel
  #     DB_USER: adminpanel
  #     DB_PASSWORD: password
  #     WAIT_FOR_DB: "true"
  #   depends_on:
  #     mysql:
  #       condition: service_healthy
  #   networks:
  #     - adminpanel_network
  #   volumes:
  #     - ./backend/database/migrations:/app/migrations:ro
  #     - ./backend/src/utils:/app/src/utils:ro
  #   restart: "no"  # Запускается один раз

  # Backend с автоматическим ожиданием миграций
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: adminpanel_backend_dev
    platform: linux/arm64
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3000
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: adminpanel
      DB_USER: adminpanel
      DB_PASSWORD: password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: your-jwt-secret-key
      # ОТКЛЮЧАЕМ автоматические миграции временно
      RUN_MIGRATIONS: "false"
      WAIT_FOR_DB: "true"
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./backend/logs:/app/logs
    depends_on:
      mysql:
        condition: service_healthy
      # Убираем зависимость от миграций
    networks:
      - adminpanel_network
    command: npm run dev

  # Redis
  redis:
    image: redis:7-alpine
    container_name: adminpanel_redis_dev
    platform: linux/arm64
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data_dev:/data
    networks:
      - adminpanel_network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: adminpanel_frontend_dev
    platform: linux/arm64
    restart: unless-stopped
    environment:
      PORT: 3000
      REACT_APP_API_URL: http://localhost:3000/api
      BROWSER: none
      FAST_REFRESH: true
    ports:
      - "3001:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - adminpanel_network
    depends_on:
      - backend
    stdin_open: true
    tty: true

  # Adminer для удобного просмотра БД
  adminer:
    image: adminer:latest
    container_name: adminpanel_adminer_dev
    platform: linux/arm64
    restart: unless-stopped
    environment:
      ADMINER_DEFAULT_SERVER: mysql
      ADMINER_DEFAULT_USERNAME: adminpanel
      ADMINER_DEFAULT_PASSWORD: password
      ADMINER_DEFAULT_DATABASE: adminpanel
    ports:
      - "8080:8080"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - adminpanel_network
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  mysql_data_dev:
  redis_data_dev:

networks:
  adminpanel_network:
    driver: bridge