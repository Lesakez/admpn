const onSubmit = async (data) => {
    try {
      // –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      const cleanData = Object.fromEntries(
        Object.entries(data).filter(([_, value]) => value !== '' && value !== null)
      )

      if (isEdit) {
        await updateMutation.mutateAsync({ id: profile.id, data: cleanData })
      } else {
        // –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤
        await createMutation.mutateAsync([cleanData])
      }
      
      reset()
      onClose()
    } catch (error) {
      console.error('Form submission error:', error)
    }
  }

  const handleClose = () => {
    reset()
    onClose()
  }// frontend/src/components/modals/ProfileFormModal.js
import React from 'react'
import {
  CModal,
  CModalHeader,
  CModalTitle,
  CModalBody,
  CModalFooter,
  CButton,
  CForm,
  CFormInput,
  CFormLabel,
  CFormSelect,
  CFormTextarea,
  CRow,
  CCol,
  CSpinner,
  CBadge,
} from '@coreui/react'
import CIcon from '@coreui/icons-react'
import { cilSave, cilX } from '@coreui/icons'
import { useForm } from 'react-hook-form'
import { useCreateProfiles, useUpdateProfile, useFolders } from '../../hooks/useProfiles'
import { useEntityStatuses } from '../../hooks/useStatuses' // –î–û–ë–ê–í–õ–ï–ù–û

const ProfileFormModal = ({ visible, onClose, profile = null, isEdit = false }) => {
  const createMutation = useCreateProfiles()
  const updateMutation = useUpdateProfile()
  const { data: folders } = useFolders()
  
  // –î–û–ë–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
  const { data: profileStatuses, isLoading: statusesLoading } = useEntityStatuses('profile')
  
  const {
    register,
    handleSubmit,
    formState: { errors },
    reset,
    watch,
  } = useForm({
    defaultValues: {
      profileId: profile?.profileId || '',
      name: profile?.name || '',
      folderId: profile?.folderId || '',
      folderName: profile?.folderName || '',
      workspaceId: profile?.workspaceId || '',
      workspaceName: profile?.workspaceName || '',
      proxy: profile?.proxy || 'none',
      userId: profile?.userId || '',
      status: profile?.status || 'created',
    }
  })

  const isLoading = createMutation.isLoading || updateMutation.isLoading

  return (
    <CModal 
      visible={visible} 
      onClose={handleClose} 
      size="lg"
      fullscreen="md"
    >
      <CModalHeader>
        <CModalTitle>{isEdit ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å' : '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'}</CModalTitle>
      </CModalHeader>
      
      <CForm onSubmit={handleSubmit(onSubmit)}>
        <CModalBody>
          <CRow>
            {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <CCol md={6} sm={12}>
              <div className="mb-3">
                <CFormLabel htmlFor="profileId">Profile ID *</CFormLabel>
                <CFormInput
                  id="profileId"
                  placeholder="profile_001"
                  invalid={!!errors.profileId}
                  {...register('profileId', { 
                    required: 'Profile ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
                    minLength: { value: 1, message: '–ú–∏–Ω–∏–º—É–º 1 —Å–∏–º–≤–æ–ª' }
                  })}
                />
                {errors.profileId && (
                  <div className="invalid-feedback">{errors.profileId.message}</div>
                )}
              </div>
            </CCol>

            <CCol md={6} sm={12}>
              <div className="mb-3">
                <CFormLabel htmlFor="name">–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è *</CFormLabel>
                <CFormInput
                  id="name"
                  placeholder="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
                  invalid={!!errors.name}
                  {...register('name', { 
                    required: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ',
                    minLength: { value: 1, message: '–ú–∏–Ω–∏–º—É–º 1 —Å–∏–º–≤–æ–ª' }
                  })}
                />
                {errors.name && (
                  <div className="invalid-feedback">{errors.name.message}</div>
                )}
              </div>
            </CCol>

            {/* –ü–∞–ø–∫–∞ */}
            <CCol md={6}>
              <div className="mb-3">
                <CFormLabel htmlFor="folderId">Folder ID *</CFormLabel>
                <CFormInput
                  id="folderId"
                  placeholder="folder_001"
                  invalid={!!errors.folderId}
                  {...register('folderId', { 
                    required: 'Folder ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
                    minLength: { value: 1, message: '–ú–∏–Ω–∏–º—É–º 1 —Å–∏–º–≤–æ–ª' }
                  })}
                />
                {errors.folderId && (
                  <div className="invalid-feedback">{errors.folderId.message}</div>
                )}
              </div>
            </CCol>

            <CCol md={6}>
              <div className="mb-3">
                <CFormLabel htmlFor="folderName">–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ *</CFormLabel>
                <CFormInput
                  id="folderName"
                  placeholder="–ú–æ—è –ø–∞–ø–∫–∞"
                  invalid={!!errors.folderName}
                  {...register('folderName', { 
                    required: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ',
                    minLength: { value: 1, message: '–ú–∏–Ω–∏–º—É–º 1 —Å–∏–º–≤–æ–ª' }
                  })}
                />
                {errors.folderName && (
                  <div className="invalid-feedback">{errors.folderName.message}</div>
                )}
              </div>
            </CCol>

            {/* Workspace */}
            <CCol md={6}>
              <div className="mb-3">
                <CFormLabel htmlFor="workspaceId">Workspace ID *</CFormLabel>
                <CFormInput
                  id="workspaceId"
                  placeholder="workspace_001"
                  invalid={!!errors.workspaceId}
                  {...register('workspaceId', { 
                    required: 'Workspace ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
                    minLength: { value: 1, message: '–ú–∏–Ω–∏–º—É–º 1 —Å–∏–º–≤–æ–ª' }
                  })}
                />
                {errors.workspaceId && (
                  <div className="invalid-feedback">{errors.workspaceId.message}</div>
                )}
              </div>
            </CCol>

            <CCol md={6}>
              <div className="mb-3">
                <CFormLabel htmlFor="workspaceName">–ù–∞–∑–≤–∞–Ω–∏–µ Workspace *</CFormLabel>
                <CFormInput
                  id="workspaceName"
                  placeholder="–ú–æ–π workspace"
                  invalid={!!errors.workspaceName}
                  {...register('workspaceName', { 
                    required: '–ù–∞–∑–≤–∞–Ω–∏–µ workspace –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ',
                    minLength: { value: 1, message: '–ú–∏–Ω–∏–º—É–º 1 —Å–∏–º–≤–æ–ª' }
                  })}
                />
                {errors.workspaceName && (
                  <div className="invalid-feedback">{errors.workspaceName.message}</div>
                )}
              </div>
            </CCol>

            {/* User ID */}
            <CCol md={6}>
              <div className="mb-3">
                <CFormLabel htmlFor="userId">User ID</CFormLabel>
                <CFormInput
                  id="userId"
                  placeholder="user_123"
                  {...register('userId')}
                />
              </div>
            </CCol>

            {/* –°—Ç–∞—Ç—É—Å */}
            <CCol md={6}>
              <div className="mb-3">
                <CFormLabel htmlFor="status">–°—Ç–∞—Ç—É—Å</CFormLabel>
                
                {/* –ò–ó–ú–ï–ù–ï–ù–û: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ */}
                {statusesLoading ? (
                  <div className="d-flex align-items-center">
                    <CSpinner size="sm" className="me-2" />
                    <span className="text-muted">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤...</span>
                  </div>
                ) : (
                  <CFormSelect id="status" {...register('status')}>
                    {profileStatuses && Object.values(profileStatuses).map(status => (
                      <option key={status} value={status}>
                        {status === 'created' && 'üÜï –°–æ–∑–¥–∞–Ω'}
                        {status === 'active' && 'üü¢ –ê–∫—Ç–∏–≤–Ω—ã–π'}
                        {status === 'inactive' && '‚ö™ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π'}
                        {status === 'working' && 'üü° –í —Ä–∞–±–æ—Ç–µ'}
                        {status === 'banned' && 'üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}
                        {status === 'warming' && 'üî• –ü—Ä–æ–≥—Ä–µ–≤'}
                        {status === 'ready' && '‚úÖ –ì–æ—Ç–æ–≤'}
                        {status === 'error' && '‚ùå –û—à–∏–±–∫–∞'}
                        {!['created', 'active', 'inactive', 'working', 'banned', 'warming', 'ready', 'error'].includes(status) && `‚ö™ ${status}`}
                      </option>
                    ))}
                  </CFormSelect>
                )}
              </div>
            </CCol>

            {/* –ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
            <CCol xs={12}>
              <div className="mb-3">
                <CFormLabel htmlFor="proxy">–ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ *</CFormLabel>
                <CFormTextarea
                  id="proxy"
                  rows={3}
                  placeholder="none, socks5://127.0.0.1:1080, http://user:pass@proxy.com:8080"
                  invalid={!!errors.proxy}
                  {...register('proxy', { 
                    required: '–ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
                  })}
                />
                {errors.proxy && (
                  <div className="invalid-feedback">{errors.proxy.message}</div>
                )}
                <div className="form-text">
                  –£–∫–∞–∂–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏: none (–±–µ–∑ –ø—Ä–æ–∫—Å–∏), socks5://IP:PORT, http://login:pass@IP:PORT
                </div>
              </div>
            </CCol>
          </CRow>
        </CModalBody>

        <CModalFooter>
          <CButton color="secondary" onClick={handleClose} disabled={isLoading}>
            <CIcon icon={cilX} className="me-2" />
            –û—Ç–º–µ–Ω–∞
          </CButton>
          <CButton color="primary" type="submit" disabled={isLoading}>
            {isLoading ? (
              <>
                <CSpinner size="sm" className="me-2" />
                {isEdit ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ–∑–¥–∞–Ω–∏–µ...'}
              </>
            ) : (
              <>
                <CIcon icon={cilSave} className="me-2" />
                {isEdit ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'}
              </>
            )}
          </CButton>
        </CModalFooter>
      </CForm>
    </CModal>
  )
}

export default ProfileFormModal